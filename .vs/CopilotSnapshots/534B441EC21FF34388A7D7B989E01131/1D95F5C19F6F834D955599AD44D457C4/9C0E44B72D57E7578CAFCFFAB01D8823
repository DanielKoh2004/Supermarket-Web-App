using System;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using WebApplication1.Helpers;

namespace WebApplication1
{
    public partial class ForgotPassword : System.Web.UI.Page
    {
        string connStr = System.Configuration.ConfigurationManager.ConnectionStrings["OnlineOrderSystemConnection"].ConnectionString;
        int foundAccountId = 0;
        protected void btnLoadQuestions_Click(object sender, EventArgs e)
        {
            lblResult.Text = "";
            pnlQuestions.Visible = false;
            string email = txtEmail.Text.Trim();
            using (SqlConnection conn = new SqlConnection(connStr))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SELECT AccountID, SecretQuestion1, SecretQuestion2, SecretQuestion3 FROM Account WHERE Email=@Email", conn);
                cmd.Parameters.AddWithValue("@Email", email);
                var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    foundAccountId = Convert.ToInt32(reader["AccountID"]);
                    lblQ1.Text = reader["SecretQuestion1"].ToString();
                    lblQ2.Text = reader["SecretQuestion2"].ToString();
                    lblQ3.Text = reader["SecretQuestion3"].ToString();
                    pnlQuestions.Visible = true;
                    ViewState["AccountID"] = foundAccountId;
                }
                else
                {
                    lblResult.Text = "Email not found.";
                }
                reader.Close();
            }
        }

        protected void btnResetPassword_Click(object sender, EventArgs e)
        {
            lblResult.Text = "";
            int accountId = ViewState["AccountID"] != null ? Convert.ToInt32(ViewState["AccountID"]) : 0;
            if (accountId == 0)
            {
                lblResult.Text = "Please load your secret questions first.";
                return;
            }
            string a1 = txtA1.Text.Trim();
            string a2 = txtA2.Text.Trim();
            string a3 = txtA3.Text.Trim();
            string newPassword = txtNewPassword.Text.Trim();
            string confirmPassword = txtConfirmPassword.Text.Trim();

            // Validate new password
            if (newPassword != confirmPassword)
            {
                lblResult.Text = "Passwords do not match.";
                return;
            }
            if (!IsValidPassword(newPassword))
            {
                lblResult.Text = "Password does not meet requirements.";
                return;
            }

            // Check answers
            using (SqlConnection conn = new SqlConnection(connStr))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SELECT SecretAnswer1, SecretAnswer2, SecretAnswer3 FROM Account WHERE AccountID=@AccountID", conn);
                cmd.Parameters.AddWithValue("@AccountID", accountId);
                var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    string ans1 = reader["SecretAnswer1"].ToString();
                    string ans2 = reader["SecretAnswer2"].ToString();
                    string ans3 = reader["SecretAnswer3"].ToString();
                    if (a1.Equals(ans1, StringComparison.OrdinalIgnoreCase) &&
                        a2.Equals(ans2, StringComparison.OrdinalIgnoreCase) &&
                        a3.Equals(ans3, StringComparison.OrdinalIgnoreCase))
                    {
                        reader.Close();
                        // Hash and update password
                        string hashedPassword = PasswordHelper.HashPassword(newPassword);
                        SqlCommand updateCmd = new SqlCommand("UPDATE Account SET Password=@Password WHERE AccountID=@AccountID", conn);
                        updateCmd.Parameters.AddWithValue("@Password", hashedPassword);
                        updateCmd.Parameters.AddWithValue("@AccountID", accountId);
                        updateCmd.ExecuteNonQuery();
                        lblResult.ForeColor = System.Drawing.Color.Green;
                        lblResult.Text = "Password reset successful! You can now log in.";
                        pnlQuestions.Visible = false;
                    }
                    else
                    {
                        lblResult.Text = "One or more answers are incorrect.";
                    }
                }
                else
                {
                    lblResult.Text = "Account not found.";
                }
                reader.Close();
            }
        }

        private bool IsValidPassword(string password)
        {
            if (string.IsNullOrWhiteSpace(password) || password.Length < 8 || password.Length > 50)
                return false;
            if (password.Contains(" "))
                return false;
            if (!Regex.IsMatch(password, @"[A-Z]")) // Uppercase
                return false;
            if (!Regex.IsMatch(password, @"[a-z]")) // Lowercase
                return false;
            if (!Regex.IsMatch(password, @"\d")) // Number
                return false;
            if (!Regex.IsMatch(password, @"[!@#$%]")) // Special char
                return false;
            return true;
        }
        protected global::System.Web.UI.WebControls.Label lblResult;
        protected global::System.Web.UI.WebControls.Panel pnlQuestions;
        protected global::System.Web.UI.WebControls.TextBox txtEmail;
        protected global::System.Web.UI.WebControls.Label lblQ1;
        protected global::System.Web.UI.WebControls.Label lblQ2;
        protected global::System.Web.UI.WebControls.Label lblQ3;
        protected global::System.Web.UI.WebControls.TextBox txtA1;
        protected global::System.Web.UI.WebControls.TextBox txtA2;
        protected global::System.Web.UI.WebControls.TextBox txtA3;
        protected global::System.Web.UI.WebControls.TextBox txtNewPassword;
        protected global::System.Web.UI.WebControls.TextBox txtConfirmPassword;
    }
}
