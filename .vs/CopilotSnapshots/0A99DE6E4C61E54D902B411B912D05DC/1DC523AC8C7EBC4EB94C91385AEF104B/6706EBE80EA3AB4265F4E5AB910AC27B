using System;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using System.Web.UI;
using System.Web.UI.WebControls;
using WebApplication1.Helpers;

namespace WebApplication1
{
    public partial class AddStaff : System.Web.UI.Page
    {
        // Connection string for database access
        string connStr = System.Configuration.ConfigurationManager.ConnectionStrings["OnlineOrderSystemConnection"].ConnectionString;

        // Page load event (no special logic required currently)
        protected void Page_Load(object sender, EventArgs e)
        {
        }

        // Validates password according to defined rules
        private bool IsValidPassword(string password)
        {
            // Check for null/whitespace, length, and no spaces
            if (string.IsNullOrWhiteSpace(password) || password.Length < 8 || password.Length > 50)
                return false;
            if (password.Contains(" "))
                return false;
            // Check for uppercase, lowercase, digit, and special character
            if (!Regex.IsMatch(password, @"[A-Z]")) // Uppercase
                return false;
            if (!Regex.IsMatch(password, @"[a-z]")) // Lowercase
                return false;
            if (!Regex.IsMatch(password, @"\d")) // Number
                return false;
            if (!Regex.IsMatch(password, @"[!@#$%]")) // Special char
                return false;
            return true;
        }

        // Event handler for Add Staff button click
        protected void btnAdd_Click(object sender, EventArgs e)
        {
            // Retrieve and trim user input values
            string email = txtEmail.Text.Trim();
            string password = txtPassword.Text.Trim();
            string name = txtName.Text.Trim();
            string role = ddlRole.SelectedValue;
            string secretQ1 = ddlSecretQuestion1.SelectedItem.Text;
            string secretA1 = txtSecretAnswer1.Text.Trim();
            string secretQ2 = ddlSecretQuestion2.SelectedItem.Text;
            string secretA2 = txtSecretAnswer2.Text.Trim();
            string secretQ3 = ddlSecretQuestion3.SelectedItem.Text;
            string secretA3 = txtSecretAnswer3.Text.Trim();

            // Validate required fields
            if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password) || string.IsNullOrEmpty(name) || string.IsNullOrEmpty(role)
                || string.IsNullOrEmpty(secretQ1) || string.IsNullOrEmpty(secretA1)
                || string.IsNullOrEmpty(secretQ2) || string.IsNullOrEmpty(secretA2)
                || string.IsNullOrEmpty(secretQ3) || string.IsNullOrEmpty(secretA3))
            {
                lblMessage.Text = "Please fill in all fields.";
                return;
            }
            // Validate password strength
            if (!IsValidPassword(password))
            {
                lblMessage.Text = "Password does not meet requirements.";
                return;
            }
            // Hash password for secure storage
            string hashedPassword = PasswordHelper.HashPassword(password);
            using (SqlConnection conn = new SqlConnection(connStr))
            {
                conn.Open();
                // Begin transaction for atomic insert
                SqlTransaction transaction = conn.BeginTransaction();
                try
                {
                    // Insert into Account table (AccountType is 'Staff')
                    string accountQuery = "INSERT INTO Account (Email, Password, AccountType, SecretQuestion1, SecretAnswer1, SecretQuestion2, SecretAnswer2, SecretQuestion3, SecretAnswer3) OUTPUT INSERTED.AccountID VALUES (@Email, @Password, 'Staff', @SecretQuestion1, @SecretAnswer1, @SecretQuestion2, @SecretAnswer2, @SecretQuestion3, @SecretAnswer3)";
                    SqlCommand cmdAccount = new SqlCommand(accountQuery, conn, transaction);
                    cmdAccount.Parameters.AddWithValue("@Email", email);
                    cmdAccount.Parameters.AddWithValue("@Password", hashedPassword);
                    cmdAccount.Parameters.AddWithValue("@SecretQuestion1", secretQ1);
                    cmdAccount.Parameters.AddWithValue("@SecretAnswer1", secretA1);
                    cmdAccount.Parameters.AddWithValue("@SecretQuestion2", secretQ2);
                    cmdAccount.Parameters.AddWithValue("@SecretAnswer2", secretA2);
                    cmdAccount.Parameters.AddWithValue("@SecretQuestion3", secretQ3);
                    cmdAccount.Parameters.AddWithValue("@SecretAnswer3", secretA3);
                    // Get new AccountID from insert
                    int accountId = (int)cmdAccount.ExecuteScalar();

                    // Insert into Staff table (Role is only here)
                    string staffQuery = "INSERT INTO Staff (AccountID, Name, Role) VALUES (@AccountID, @Name, @Role)";
                    SqlCommand cmdStaff = new SqlCommand(staffQuery, conn, transaction);
                    cmdStaff.Parameters.AddWithValue("@AccountID", accountId);
                    cmdStaff.Parameters.AddWithValue("@Name", name);
                    cmdStaff.Parameters.AddWithValue("@Role", role);
                    cmdStaff.ExecuteNonQuery();

                    // Commit transaction if both inserts succeed
                    transaction.Commit();
                    lblMessage.ForeColor = System.Drawing.Color.Green;
                    lblMessage.Text = "Staff added successfully!";
                    // Clear input fields
                    txtEmail.Text = "";
                    txtPassword.Text = "";
                    txtName.Text = "";
                    txtSecretAnswer1.Text = "";
                    txtSecretAnswer2.Text = "";
                    txtSecretAnswer3.Text = "";
                }
                catch (Exception ex)
                {
                    // Rollback transaction on error
                    transaction.Rollback();
                    lblMessage.ForeColor = System.Drawing.Color.Red;
                    lblMessage.Text = "Error: " + ex.Message;
                }
            }
        }
    }
}