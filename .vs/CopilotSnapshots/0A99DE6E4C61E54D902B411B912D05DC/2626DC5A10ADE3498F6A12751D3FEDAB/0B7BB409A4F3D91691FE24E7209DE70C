using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace WebApplication1
{
    public partial class Payment : System.Web.UI.Page
    {
        // Page load event
        protected void Page_Load(object sender, EventArgs e)
        {
            // On first load, hide all payment panels
            if (!IsPostBack)
            {
                pnlBanking.Visible = false;
                pnlCard.Visible = false;
                pnlEwallet.Visible = false;
            }
        }

        // Handles change in payment method selection
        protected void rblPaymentMethod_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selected = rblPaymentMethod.SelectedValue;
            // Save selected payment method to session
            Session["PaymentMethod"] = selected;
            // Show relevant payment panel based on selection
            pnlBanking.Visible = selected == "bank";
            pnlCard.Visible = selected == "card";
            pnlEwallet.Visible = selected == "wallet";
        }

        // Handles payment confirmation and order processing
        protected void btnPay_Click(object sender, EventArgs e)
        {
            // Get user/customer ID from session
            int accountId = Session["AccountID"] != null ? Convert.ToInt32(Session["AccountID"]) : 0;
            if (accountId <= 0)
            {
                Response.Write("<script>alert('Please log in to complete payment.'); window.location='Login.aspx';</script>");
                return;
            }

            // Get connection string from configuration
            string connStr = System.Configuration.ConfigurationManager.ConnectionStrings["OnlineOrderSystemConnection"].ConnectionString;
            using (var con = new System.Data.SqlClient.SqlConnection(connStr))
            {
                con.Open();
                // Get CustomerID from AccountID
                int customerId = 0;
                using (var cmd = new System.Data.SqlClient.SqlCommand("SELECT CustomerID FROM Customer WHERE AccountID=@AccountID", con))
                {
                    cmd.Parameters.AddWithValue("@AccountID", accountId);
                    var result = cmd.ExecuteScalar();
                    if (result != null) customerId = Convert.ToInt32(result);
                }
                if (customerId == 0)
                {
                    Response.Write("<script>alert('Customer not found.'); window.location='Home.aspx';</script>");
                    return;
                }

                // Get cart ID for this user
                int cartId = 0;
                using (var cmd = new System.Data.SqlClient.SqlCommand("SELECT CartID FROM Cart WHERE AccountID=@AccountID", con))
                {
                    cmd.Parameters.AddWithValue("@AccountID", accountId);
                    var result = cmd.ExecuteScalar();
                    if (result != null) cartId = Convert.ToInt32(result);
                }
                if (cartId == 0)
                {
                    Response.Write("<script>alert('Your cart is empty.'); window.location='Menu.aspx';</script>");
                    return;
                }

                // Get cart items for this cart
                var cartItems = new List<dynamic>();
                using (var cmd = new System.Data.SqlClient.SqlCommand("SELECT ItemID, ItemQuantity FROM Cart_Item WHERE CartID=@CartID", con))
                {
                    cmd.Parameters.AddWithValue("@CartID", cartId);
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            cartItems.Add(new { ItemID = reader.GetInt32(0), Quantity = reader.GetInt32(1) });
                        }
                    }
                }
                if (cartItems.Count == 0)
                {
                    Response.Write("<script>alert('Your cart is empty.'); window.location='Menu.aspx';</script>");
                    return;
                }

                // Get delivery info and payment method from session
                string deliveryInfo = Session["DeliveryInfo"] != null ? Session["DeliveryInfo"].ToString() : "N/A";
                string paymentMethod = Session["PaymentMethod"] != null ? Session["PaymentMethod"].ToString() : "N/A";
                decimal totalAmount = 0;
                // Calculate total amount for all cart items
                foreach (var item in cartItems)
                {
                    using (var cmd = new System.Data.SqlClient.SqlCommand("SELECT UnitPrice FROM Item WHERE ItemID=@ItemID", con))
                    {
                        cmd.Parameters.AddWithValue("@ItemID", item.ItemID);
                        var priceObj = cmd.ExecuteScalar();
                        if (priceObj != null)
                            totalAmount += Convert.ToDecimal(priceObj) * item.Quantity;
                    }
                }

                // --- Voucher logic ---
                int selectedVoucherId = Session["SelectedVoucherID"] != null ? Convert.ToInt32(Session["SelectedVoucherID"]) : 0;
                int selectedCustomerVoucherId = Session["SelectedCustomerVoucherID"] != null ? Convert.ToInt32(Session["SelectedCustomerVoucherID"]) : 0;
                if (selectedVoucherId > 0 && selectedCustomerVoucherId > 0)
                {
                    decimal discount = 0;
                    using (var cmd = new System.Data.SqlClient.SqlCommand("SELECT DiscountAmount FROM Voucher WHERE VoucherID=@VoucherID", con))
                    {
                        cmd.Parameters.AddWithValue("@VoucherID", selectedVoucherId);
                        var result = cmd.ExecuteScalar();
                        if (result != null) discount = Convert.ToDecimal(result);
                    }
                    totalAmount -= discount;
                    using (var cmd = new System.Data.SqlClient.SqlCommand("UPDATE CustomerVoucher SET IsUsed=1 WHERE CustomerVoucherID=@CustomerVoucherID", con))
                    {
                        cmd.Parameters.AddWithValue("@CustomerVoucherID", selectedCustomerVoucherId);
                        cmd.ExecuteNonQuery();
                    }
                }
                // --- End voucher logic ---

                // Insert order record
                int orderId = 0;
                using (var cmd = new System.Data.SqlClient.SqlCommand("INSERT INTO [Order] (CustomerID, OrderDate, TotalAmount) OUTPUT INSERTED.OrderID VALUES (@CustomerID, @OrderDate, @TotalAmount)", con))
                {
                    cmd.Parameters.AddWithValue("@CustomerID", customerId);
                    cmd.Parameters.AddWithValue("@OrderDate", DateTime.Now);
                    cmd.Parameters.AddWithValue("@TotalAmount", totalAmount);
                    orderId = (int)cmd.ExecuteScalar();
                }

                // Insert order items and update stock
                foreach (var item in cartItems)
                {
                    // Get the current price for the item
                    decimal itemPrice = 0;
                    using (var priceCmd = new System.Data.SqlClient.SqlCommand("SELECT UnitPrice FROM Item WHERE ItemID=@ItemID", con))
                    {
                        priceCmd.Parameters.AddWithValue("@ItemID", item.ItemID);
                        var priceObj = priceCmd.ExecuteScalar();
                        if (priceObj != null)
                            itemPrice = Convert.ToDecimal(priceObj);
                    }

                    // Insert order item record
                    using (var cmd = new System.Data.SqlClient.SqlCommand("INSERT INTO OrderItem (ItemID, OrderID, Quantity, ItemPrice) VALUES (@ItemID, @OrderID, @Quantity, @ItemPrice)", con))
                    {
                        cmd.Parameters.AddWithValue("@ItemID", item.ItemID);
                        cmd.Parameters.AddWithValue("@OrderID", orderId);
                        cmd.Parameters.AddWithValue("@Quantity", item.Quantity);
                        cmd.Parameters.AddWithValue("@ItemPrice", itemPrice);
                        cmd.ExecuteNonQuery();
                    }

                    // Update stock quantity in Item table
                    using (var updateStockCmd = new System.Data.SqlClient.SqlCommand("UPDATE Item SET StockQuantity = StockQuantity - @Quantity WHERE ItemID = @ItemID", con))
                    {
                        updateStockCmd.Parameters.AddWithValue("@Quantity", item.Quantity);
                        updateStockCmd.Parameters.AddWithValue("@ItemID", item.ItemID);
                        updateStockCmd.ExecuteNonQuery();
                    }
                }

                // Insert payment record
                using (var cmd = new System.Data.SqlClient.SqlCommand(
                    "INSERT INTO Payment (OrderID, PaymentAmount, PaymentDate, PaymentMethod) VALUES (@OrderID, @PaymentAmount, @PaymentDate, @PaymentMethod)", con))
                {
                    cmd.Parameters.AddWithValue("@OrderID", orderId);
                    cmd.Parameters.AddWithValue("@PaymentAmount", totalAmount);
                    cmd.Parameters.AddWithValue("@PaymentDate", DateTime.Now);
                    cmd.Parameters.AddWithValue("@PaymentMethod", paymentMethod);
                    cmd.ExecuteNonQuery();
                }

                // Award member points (1 point per RM1 spent)
                int pointsEarned = (int)Math.Floor(totalAmount);
                if (customerId > 0 && pointsEarned > 0)
                {
                    using (var cmd = new System.Data.SqlClient.SqlCommand("UPDATE Customer SET MemberPoints = MemberPoints + @Points WHERE CustomerID = @CustomerID", con))
                    {
                        cmd.Parameters.AddWithValue("@Points", pointsEarned);
                        cmd.Parameters.AddWithValue("@CustomerID", customerId);
                        cmd.ExecuteNonQuery();
                    }
                }

                // Insert delivery or pickup info if applicable
                string checkoutMethod = Session["CheckoutMethod"] != null ? Session["CheckoutMethod"].ToString() : "";
                string recipientName = Session["RecipientName"] != null ? Session["RecipientName"].ToString() : "";
                string deliveryAddress = Session["DeliveryAddress"] != null ? Session["DeliveryAddress"].ToString() : "";
                string contactNumber = Session["ContactNumber"] != null ? Session["ContactNumber"].ToString() : "";
                string pickupLocation = Session["PickupLocation"] != null ? Session["PickupLocation"].ToString() : "";

                if (checkoutMethod == "delivery" && !string.IsNullOrEmpty(recipientName) && !string.IsNullOrEmpty(deliveryAddress))
                {
                    // Insert delivery info
                    using (var cmd = new System.Data.SqlClient.SqlCommand("INSERT INTO Delivery (OrderID, RecipientName, DeliveryAddress, ContactNumber) VALUES (@OrderID, @RecipientName, @DeliveryAddress, @ContactNumber)", con))
                    {
                        cmd.Parameters.AddWithValue("@OrderID", orderId);
                        cmd.Parameters.AddWithValue("@RecipientName", recipientName);
                        cmd.Parameters.AddWithValue("@DeliveryAddress", deliveryAddress);
                        cmd.Parameters.AddWithValue("@ContactNumber", contactNumber);
                        cmd.ExecuteNonQuery();
                    }
                }
                else if (checkoutMethod == "pickup" && !string.IsNullOrEmpty(pickupLocation))
                {
                    // Insert pickup info
                    using (var cmd = new System.Data.SqlClient.SqlCommand("INSERT INTO Pickup (OrderID, PickupLocation) VALUES (@OrderID, @PickupLocation)", con))
                    {
                        cmd.Parameters.AddWithValue("@OrderID", orderId);
                        cmd.Parameters.AddWithValue("@PickupLocation", pickupLocation);
                        cmd.ExecuteNonQuery();
                    }
                }

                // Clear cart items
                using (var cmd = new System.Data.SqlClient.SqlCommand("DELETE FROM Cart_Item WHERE CartID=@CartID", con))
                {
                    cmd.Parameters.AddWithValue("@CartID", cartId);
                    cmd.ExecuteNonQuery();
                }
                // Optionally clear cart itself
                using (var cmd = new System.Data.SqlClient.SqlCommand("DELETE FROM Cart WHERE CartID=@CartID", con))
                {
                    cmd.Parameters.AddWithValue("@CartID", cartId);
                    cmd.ExecuteNonQuery();
                }
            }
            // Show alert, then redirect to order history
            Response.Write("<script>alert('Payment Successful! Thank You!'); window.location='OrderHistory.aspx';</script>");
        }
        // Handles back button click, returns to checkout page
        protected void btnBack_Click(object sender, EventArgs e)
        {
            Response.Redirect("Checkout.aspx");

        }

    }
}

